# coding=UTF-8
# -----------------------------------------------
# Generated by InVEST 0.9.5 on Thu Jul 26 15:05:24 2018
# Model: SEALS: Spatial Economic Allocation Land-change Simulator
from collections import OrderedDict
# import hazelbean.project_flow
import hazelbean as hb
from seals_model_unilever_multi_scenario import *
import shutil, os, sys

args = {
    'area_of_interest_path': 'C:/OneDrive/Projects/cge/seals/projects/unilever_gluc_maize_expansion/input/seals_admin_regions.shp',
    'base_year_lulc_path': 'C:/OneDrive/Projects/cge/seals/base_data/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2010-v2.0.7.tif',
    'batch_id': 'seals_id',
    'class_proximity_parameters_path': 'C:/OneDrive/Projects/cge/seals/projects/unilever_gluc_maize_expansion/input/class_proximity_parameters.csv',
    'classes_to_ignore': '0',
    # 'coarse_change_maps_dir': 'C:/OneDrive/Projects/cge/seals/projects/unilever_gluc_maize_expansion/input/coarse_change_maps',
    'conversion_eligibility_path': 'C:/OneDrive/Projects/cge/seals/projects/unilever_gluc_maize_expansion/input/conversion_eligibility.csv',
    'enable_batch_mode': True,
    'intermediate_dir': 'C:/OneDrive/Projects/cge/seals/projects/unilever_gluc_maize_expansion/intermediate',
    'lulc_class_types_path': 'C:/OneDrive/Projects/cge/seals/projects/unilever_gluc_maize_expansion/input/lulc_class_types.csv',
    'output_base_map_path': 'C:/OneDrive/Projects/cge/seals/base_data/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2010-v2.0.7.tif',
    'pairwise_class_relationships_path': 'C:/OneDrive/Projects/cge/seals/projects/unilever_gluc_maize_expansion/input/pairwise_class_relationships.csv',
    'physical_suitability_importance': '0.5',
    'physical_suitability_path': 'C:/OneDrive/Projects/cge/seals/base_data/physical_suitability_compressed.tif',
    'skip_existing_batch_components': False,
    'use_existing_batch': False,
    'workspace_dir': 'C:/OneDrive/Projects/cge/seals/projects/unilever_gluc_maize_expansion',
    'remove_unneeded_intermediate_files': False,
}

if __name__ == '__main__':

    # coarse_names = [
    #     "Scenario15",
    #     "Scenario14",
    #     "Scenario13",
    #     # "Scenario12",
    #     # "Scenario11",
    #     # "Scenario10",
    #     # "Scenario09",
    #     # "Scenario08",
    #     # "Scenario07",
    #     # "Scenario06",
    #     # "Scenario05",
    #     # "Scenario04",
    #     "Scenario03",
    #     "Scenario02",
    #     "Scenario01",
    # ]

    coarse_names = [
        "best_5yr",
        "optimistic_5yr",
        "realistic_5yr",
        "best_10yr",
        "optimistic_10yr",
        "realistic_10yr",
    ]

    replacements = OrderedDict()
    # replacements['workspace_dir'] = ['C:/OneDrive/Projects/cge/seals/projects/unilever_gluc_maize_expansion/' + i for i in coarse_names]
    replacements['intermediate_dir'] = ['C:/OneDrive/Projects/cge/seals/projects/unilever_gluc_maize_expansion/intermediate/' + i for i in coarse_names]
    replacements['output_dir'] = ['C:/OneDrive/Projects/cge/seals/projects/unilever_gluc_maize_expansion/output/' + i for i in coarse_names]
    replacements['coarse_change_maps_dir'] = ['C:/OneDrive/Projects/cge/seals/projects/unilever_gluc_maize_expansion/input/GLUC_2019-01-19/scenarios/' + i for i in coarse_names]

    lengths = []
    for k, v in replacements.items():
        lengths.append(len(v))
    # print('lengths', lengths)

    set_lengths = list(set(lengths))
    if len(set_lengths) > 1:
        raise NameError('Wrong lengths given to API')
    # print('set_lengths', set_lengths)
    for i in range(set_lengths[0]):
        for k, v in replacements.items():
            args[k] = v[i]
        print('args', args)

        # print(args)
        p.execute(args)

    do_dist = False
    if do_dist:
        dist_dir = os.path.join('output', 'seals_dist_' + hb.pretty_time())
        # print('coarse_names', coarse_names)
        for name in coarse_names:
            target_dir = os.path.join('intermediate', name, 'stitch_projections')
            file_path = hb.get_most_recent_timestamped_file_in_dir(target_dir, 'projected_lulc_merged', include_extensions='.tif')

            dist_path = os.path.join(dist_dir, 'lulc_' + name + '.tif')
            hb.create_directories(dist_dir)
            hb.copy_shutil_flex(file_path, dist_path)
        hb.zip_dir(dist_dir, dist_dir + '.zip')